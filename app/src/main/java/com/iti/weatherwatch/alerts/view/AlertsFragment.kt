package com.iti.weatherwatch.alerts.view

import android.content.DialogInterface
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.provider.Settings
import android.view.*
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.lifecycleScope
import androidx.navigation.Navigation
import androidx.recyclerview.widget.LinearLayoutManager
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import com.iti.weatherwatch.R
import com.iti.weatherwatch.alerts.viewmodel.AlertsViewModel
import com.iti.weatherwatch.alerts.viewmodel.AlertsViewModelFactory
import com.iti.weatherwatch.databinding.FragmentAlertsBinding
import com.iti.weatherwatch.datasource.WeatherRepository
import com.iti.weatherwatch.datasource.model.WeatherAlert
import com.iti.weatherwatch.dialogs.view.AlertTimeDialog
import com.iti.weatherwatch.favorites.view.FavoritesFragment

/*
This class is an implementation of a Fragment in an Android app. The purpose of this fragment is to display alerts related to weather.

The class has a private variable, _binding, that holds an instance of the FragmentAlertsBinding, which is a class that is auto-generated by the Android binding library based on the XML layout file.

It also has a private variable, viewModel, which holds an instance of the AlertsViewModel class. This class is responsible for providing data to the fragment and for handling user interactions with the UI.

There is a private variable alertsAdapter that is an instance of the AlertAdapter class, which is responsible for handling the display of the alerts in a RecyclerView.

The onCreateView method is responsible for inflating the fragment's layout and returning the root view.

The onViewCreated method is called when the view has been created and is responsible for initializing the UI components, such as the RecyclerView, and setting up the user interaction. The method also retrieves data from the view model and updates the UI accordingly.

The class has private methods that handle user interaction events such as showAlertDialog() which shows an alert dialog, fetchAlertsRecycler() which updates the RecyclerView, and initFavoritesRecyclerView() which sets up the RecyclerView.

The navigationToHomeScreen() method is responsible for handling the back button press and navigating to the home screen when it's pressed.

Finally, the onDestroyView() method is called when the fragment's view is destroyed, and it's responsible for cleaning up any resources that were used by the fragment.
 */
class AlertsFragment : Fragment() {

    private var _binding: FragmentAlertsBinding? = null

    private val viewModel: AlertsViewModel by viewModels {
        AlertsViewModelFactory(WeatherRepository.getRepository(requireActivity().application))
    }

    private lateinit var alertsAdapter: AlertAdapter

    private val binding get() = _binding!!

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentAlertsBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        navigationToHomeScreen()
        initFavoritesRecyclerView()

        binding.btnAddAlert.setOnClickListener {
            if (Settings.canDrawOverlays(requireContext())) {
                showAlertDialog()
            } else {
                checkDrawOverlayPermission()
            }
        }

        viewModel.getFavorites()

        lifecycleScope.launchWhenStarted {
            viewModel.alerts.collect {
                if (it.isNotEmpty()) {
                    binding.textEmptyAlert.visibility = View.GONE
                } else {
                    binding.textEmptyAlert.visibility = View.VISIBLE
                }
                fetchAlertsRecycler(it)
            }
        }
    }

    private fun showAlertDialog() {
        AlertTimeDialog().show(requireActivity().supportFragmentManager, "AlertDialog")
    }

    private fun fetchAlertsRecycler(list: List<WeatherAlert>?) {
        alertsAdapter.alertsList = list ?: emptyList()
        alertsAdapter.notifyDataSetChanged()
    }

    private fun initFavoritesRecyclerView() {
        val linearLayoutManager = LinearLayoutManager(FavoritesFragment().context)
        alertsAdapter = AlertAdapter(this.requireContext(), viewModel)
        binding.alertRecyclerView.layoutManager = linearLayoutManager
        binding.alertRecyclerView.adapter = alertsAdapter
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    private fun navigationToHomeScreen() {
        binding.root.isFocusableInTouchMode = true
        binding.root.requestFocus()
        binding.root.setOnKeyListener(View.OnKeyListener { v, keyCode, event ->
            if (keyCode == KeyEvent.KEYCODE_BACK && event.action == KeyEvent.ACTION_UP) {
                Navigation.findNavController(v)
                    .navigate(R.id.action_navigation_alerts_to_navigation_home)
                return@OnKeyListener true
            }
            false
        })
    }

    private fun checkDrawOverlayPermission() {
        val alertDialogBuilder = MaterialAlertDialogBuilder(requireContext())
        alertDialogBuilder.setTitle(getString(R.string.overlay_title))
            .setMessage(getString(R.string.alert_dialog_body))
            .setPositiveButton(getString(R.string.btn_ok)) { dialog: DialogInterface, _: Int ->
                val intent = Intent(
                    Settings.ACTION_APPLICATION_DETAILS_SETTINGS,
                    Uri.parse("package:" + requireContext().applicationContext.packageName)
                )
                // request permission via start activity for result
                startActivityForResult(
                    intent,
                    1
                ) //It will call onActivityResult Function After you press Yes/No and go Back after giving permission
                dialog.dismiss()
                showAlertDialog()
            }.setNegativeButton(
                getString(R.string.btn_cancel)
            ) { dialog: DialogInterface, _: Int ->
                dialog.dismiss()
                showAlertDialog()
            }.show()
    }
}
